2024-05-13 08:43:58,291 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.2.0+10018c6
	PyTorch: 2.2.2+cu118
	TorchVision: 0.17.2+cu118
2024-05-13 08:43:58,292 INFO: 
  name: MambaIR_CC
  model_type: ImageCleanModel
  num_gpu: 2
  manual_seed: 10
  datasets:[
    train:[
      task: CC
      name: ColorCheckerDataset
      type: ColorCheckerDataset
      dataroot_gt: /data/czx/datasets/CC/train/gt_corrected/
      dataroot_img: /data/czx/datasets/CC/train/linear_images/
      dataroot_label: /data/czx/datasets/CC/metadata.txt
      img_size: [256, 256]
      gt_size: 512
      use_shuffle: True
      num_worker_per_gpu: 8
      batch_size_per_gpu: 1
      phase: train
    ]
    val:[
      name: CC
      type: ColorCheckerDataset
      dataroot_gt: /data/czx/datasets/CC/val/gt_corrected/
      dataroot_img: /data/czx/datasets/CC/val/linear_images
      dataroot_label: /data/czx/datasets/CC/metadata.txt
      img_size: [256, 256]
      phase: val
    ]
  ]
  network_g:[
    type: MambaIRUNet
    upscale: 1
    in_chans: 3
    img_size: 64
    img_range: 1.0
    d_state: 16
    depths: [6, 6, 6, 6, 6, 6]
    embed_dim: 180
    mlp_ratio: 2
    upsampler: pixelshuffle
    resi_connection: 1conv
  ]
  path:[
    pretrain_network_g: None
    strict_load_g: True
    resume_state: None
    root: /data/czx/MambaCC
    experiments_root: /data/czx/MambaCC/experiments/MambaIR_CC
    models: /data/czx/MambaCC/experiments/MambaIR_CC/models
    training_states: /data/czx/MambaCC/experiments/MambaIR_CC/training_states
    log: /data/czx/MambaCC/experiments/MambaIR_CC
    visualization: /data/czx/MambaCC/experiments/MambaIR_CC/visualization
  ]
  train:[
    optim_g:[
      type: Adam
      lr: 0.0002
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    scheduler:[
      type: MultiStepLR
      milestones: [250000, 400000, 450000, 475000]
      gamma: 0.5
    ]
    total_iter: 500000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
  ]
  val:[
    val_freq: 5000.0
    save_img: False
    metrics:[
      psnr:[
        type: calculate_psnr
        crop_border: 2
        test_y_channel: True
      ]
    ]
  ]
  logger:[
    print_freq: 200
    save_checkpoint_freq: 5000.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  is_train: True
  dist: False
  rank: 0
  world_size: 1

2024-05-13 08:43:58,462 INFO: Dataset ColorCheckerDataset - ColorCheckerDataset is created.
2024-05-13 08:43:58,463 INFO: Training statistics:
	Number of train images: 560
	Dataset enlarge ratio: 1
	Batch size per gpu: 1
	World size (gpu number): 1
	Require iter number per epoch: 560
	Total epochs: 893; iters: 500000.
2024-05-13 08:43:58,465 INFO: Dataset ColorCheckerDataset - CC is created.
2024-05-13 08:43:58,465 INFO: Number of val images/folders in CC: 8
2024-05-13 08:44:01,510 INFO: Network: DataParallel - MambaIRUNet, with parameters: 31,506,136
2024-05-13 08:44:01,510 INFO: MambaIRUNet(
  (patch_embed): OverlapPatchEmbed(
    (proj): Conv2d(3, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
  (encoder_level1): ModuleList(
    (0-3): 4 x VSSBlock(
      (ln_1): LayerNorm((48,), eps=1e-05, elementwise_affine=True)
      (self_attention): SS2D(
        (in_proj): Linear(in_features=48, out_features=192, bias=False)
        (conv2d): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
        (act): SiLU()
        (out_norm): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
        (out_proj): Linear(in_features=96, out_features=48, bias=False)
      )
      (drop_path): DropPath(drop_prob=0.000)
      (conv_blk): CAB(
        (cab): Sequential(
          (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GELU(approximate='none')
          (2): Conv2d(16, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): ChannelAttention(
            (attention): Sequential(
              (0): AdaptiveAvgPool2d(output_size=1)
              (1): Conv2d(48, 1, kernel_size=(1, 1), stride=(1, 1))
              (2): ReLU(inplace=True)
              (3): Conv2d(1, 48, kernel_size=(1, 1), stride=(1, 1))
              (4): Sigmoid()
            )
          )
        )
      )
      (ln_2): LayerNorm((48,), eps=1e-05, elementwise_affine=True)
    )
  )
  (down1_2): Downsample(
    (body): Sequential(
      (0): Conv2d(48, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): PixelUnshuffle(downscale_factor=2)
    )
  )
  (encoder_level2): ModuleList(
    (0-5): 6 x VSSBlock(
      (ln_1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
      (self_attention): SS2D(
        (in_proj): Linear(in_features=96, out_features=384, bias=False)
        (conv2d): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192)
        (act): SiLU()
        (out_norm): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
        (out_proj): Linear(in_features=192, out_features=96, bias=False)
      )
      (drop_path): DropPath(drop_prob=0.000)
      (conv_blk): CAB(
        (cab): Sequential(
          (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GELU(approximate='none')
          (2): Conv2d(32, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): ChannelAttention(
            (attention): Sequential(
              (0): AdaptiveAvgPool2d(output_size=1)
              (1): Conv2d(96, 3, kernel_size=(1, 1), stride=(1, 1))
              (2): ReLU(inplace=True)
              (3): Conv2d(3, 96, kernel_size=(1, 1), stride=(1, 1))
              (4): Sigmoid()
            )
          )
        )
      )
      (ln_2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
    )
  )
  (down2_3): Downsample(
    (body): Sequential(
      (0): Conv2d(96, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): PixelUnshuffle(downscale_factor=2)
    )
  )
  (encoder_level3): ModuleList(
    (0-5): 6 x VSSBlock(
      (ln_1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
      (self_attention): SS2D(
        (in_proj): Linear(in_features=192, out_features=768, bias=False)
        (conv2d): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384)
        (act): SiLU()
        (out_norm): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (out_proj): Linear(in_features=384, out_features=192, bias=False)
      )
      (drop_path): DropPath(drop_prob=0.000)
      (conv_blk): CAB(
        (cab): Sequential(
          (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GELU(approximate='none')
          (2): Conv2d(64, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): ChannelAttention(
            (attention): Sequential(
              (0): AdaptiveAvgPool2d(output_size=1)
              (1): Conv2d(192, 6, kernel_size=(1, 1), stride=(1, 1))
              (2): ReLU(inplace=True)
              (3): Conv2d(6, 192, kernel_size=(1, 1), stride=(1, 1))
              (4): Sigmoid()
            )
          )
        )
      )
      (ln_2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
    )
  )
  (down3_4): Downsample(
    (body): Sequential(
      (0): Conv2d(192, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): PixelUnshuffle(downscale_factor=2)
    )
  )
  (latent): ModuleList(
    (0-7): 8 x VSSBlock(
      (ln_1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
      (self_attention): SS2D(
        (in_proj): Linear(in_features=384, out_features=1536, bias=False)
        (conv2d): Conv2d(768, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=768)
        (act): SiLU()
        (out_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (out_proj): Linear(in_features=768, out_features=384, bias=False)
      )
      (drop_path): DropPath(drop_prob=0.000)
      (conv_blk): CAB(
        (cab): Sequential(
          (0): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GELU(approximate='none')
          (2): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): ChannelAttention(
            (attention): Sequential(
              (0): AdaptiveAvgPool2d(output_size=1)
              (1): Conv2d(384, 12, kernel_size=(1, 1), stride=(1, 1))
              (2): ReLU(inplace=True)
              (3): Conv2d(12, 384, kernel_size=(1, 1), stride=(1, 1))
              (4): Sigmoid()
            )
          )
        )
      )
      (ln_2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
    )
  )
  (up4_3): Upsample(
    (body): Sequential(
      (0): Conv2d(384, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): PixelShuffle(upscale_factor=2)
    )
  )
  (reduce_chan_level3): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (decoder_level3): ModuleList(
    (0-5): 6 x VSSBlock(
      (ln_1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
      (self_attention): SS2D(
        (in_proj): Linear(in_features=192, out_features=768, bias=False)
        (conv2d): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384)
        (act): SiLU()
        (out_norm): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (out_proj): Linear(in_features=384, out_features=192, bias=False)
      )
      (drop_path): DropPath(drop_prob=0.000)
      (conv_blk): CAB(
        (cab): Sequential(
          (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GELU(approximate='none')
          (2): Conv2d(64, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): ChannelAttention(
            (attention): Sequential(
              (0): AdaptiveAvgPool2d(output_size=1)
              (1): Conv2d(192, 6, kernel_size=(1, 1), stride=(1, 1))
              (2): ReLU(inplace=True)
              (3): Conv2d(6, 192, kernel_size=(1, 1), stride=(1, 1))
              (4): Sigmoid()
            )
          )
        )
      )
      (ln_2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
    )
  )
  (up3_2): Upsample(
    (body): Sequential(
      (0): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): PixelShuffle(upscale_factor=2)
    )
  )
  (reduce_chan_level2): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (decoder_level2): ModuleList(
    (0-5): 6 x VSSBlock(
      (ln_1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
      (self_attention): SS2D(
        (in_proj): Linear(in_features=96, out_features=384, bias=False)
        (conv2d): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192)
        (act): SiLU()
        (out_norm): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
        (out_proj): Linear(in_features=192, out_features=96, bias=False)
      )
      (drop_path): DropPath(drop_prob=0.000)
      (conv_blk): CAB(
        (cab): Sequential(
          (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GELU(approximate='none')
          (2): Conv2d(32, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): ChannelAttention(
            (attention): Sequential(
              (0): AdaptiveAvgPool2d(output_size=1)
              (1): Conv2d(96, 3, kernel_size=(1, 1), stride=(1, 1))
              (2): ReLU(inplace=True)
              (3): Conv2d(3, 96, kernel_size=(1, 1), stride=(1, 1))
              (4): Sigmoid()
            )
          )
        )
      )
      (ln_2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
    )
  )
  (up2_1): Upsample(
    (body): Sequential(
      (0): Conv2d(96, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): PixelShuffle(upscale_factor=2)
    )
  )
  (decoder_level1): ModuleList(
    (0-3): 4 x VSSBlock(
      (ln_1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
      (self_attention): SS2D(
        (in_proj): Linear(in_features=96, out_features=384, bias=False)
        (conv2d): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192)
        (act): SiLU()
        (out_norm): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
        (out_proj): Linear(in_features=192, out_features=96, bias=False)
      )
      (drop_path): DropPath(drop_prob=0.000)
      (conv_blk): CAB(
        (cab): Sequential(
          (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GELU(approximate='none')
          (2): Conv2d(32, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): ChannelAttention(
            (attention): Sequential(
              (0): AdaptiveAvgPool2d(output_size=1)
              (1): Conv2d(96, 3, kernel_size=(1, 1), stride=(1, 1))
              (2): ReLU(inplace=True)
              (3): Conv2d(3, 96, kernel_size=(1, 1), stride=(1, 1))
              (4): Sigmoid()
            )
          )
        )
      )
      (ln_2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
    )
  )
  (refinement): ModuleList(
    (0-3): 4 x VSSBlock(
      (ln_1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
      (self_attention): SS2D(
        (in_proj): Linear(in_features=96, out_features=384, bias=False)
        (conv2d): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192)
        (act): SiLU()
        (out_norm): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
        (out_proj): Linear(in_features=192, out_features=96, bias=False)
      )
      (drop_path): DropPath(drop_prob=0.000)
      (conv_blk): CAB(
        (cab): Sequential(
          (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GELU(approximate='none')
          (2): Conv2d(32, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): ChannelAttention(
            (attention): Sequential(
              (0): AdaptiveAvgPool2d(output_size=1)
              (1): Conv2d(96, 3, kernel_size=(1, 1), stride=(1, 1))
              (2): ReLU(inplace=True)
              (3): Conv2d(3, 96, kernel_size=(1, 1), stride=(1, 1))
              (4): Sigmoid()
            )
          )
        )
      )
      (ln_2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
    )
  )
  (output): Conv2d(96, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
)
2024-05-13 08:44:01,572 INFO: Model [ImageCleanModel] is created.
2024-05-13 08:44:01,572 INFO: Start training from epoch: 0, iter: 0
